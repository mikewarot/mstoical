MSTOICAL - April 21, 2022
(c) 2022 Michael Warot

This is a fork of Stoical, which I found at http://stoical.sourceforge.net/

I hope to adequately honor the gift which was given.

This BRANCH of the GIT repository is where I try to get everything working properly in Windows 10 64bit, and maybe later backport to Win32.

When I came across Stoical, I thought that it might offer a route around the dead end that I often saw in Forth implementations. Usually you get to the point where you need to work with non-trivial data structures, and the limitations of the cell based stack become a brick wall. By adding types and some fairly substatial data structures, those inadequacies of Forth should be overcome.

It is my belief that MSTOICAL will eventually be able to mirror the capabilities of Lisp, with slightly fewer parenthesis.

I've long been interested in Forth and variants. I came across STOICAL a few years ago, and tried a few times to get it working, with not much luck.
Thanks to a tremendous wave of support from those who answered my questions at HackerNews, and went far beyond. We now have a viable program that I'll be working on for the forseable future.

Current goals are
  Understand the existing code
  Fixup everything to use new name
  remove Debian package folder stuff (that I don't understand)
  Code Cleanup / Bug Fixes
  Documentation
  Many working examples
  
Installation
  This WINDOWS branch requires MinGW-64, which can be found at https://www.mingw-w64.org/
  It's hard-coded to run in c:\mstoical
  Clone the repository to that folder
  From a command prompt, cd to c:\mstoical\src, and run builder.bat
  you can then run mstoical.exe
  

STOICAL's implementation is based largely on feelings about efficiency.
The source code is written in C so that it can interface with the libraries that are at the heart of the Unix system. C, though, was not designed to make writing threaded compilers easy. So, needless to say, the code isn't as pretty now as it was when started.
STOICAL is still a very new language, despite its roots. Surprisingly however, It possesses many features rarely found in even the most modern languages, and even more surprisingly, it provides them in combination. These include: POSIX Threading, POSIX Regular Expressions, associative arrays, dynamic memory allocation, socket based networking, floating point arithmetic, passive garbage collection, passive type-checking, and more. A full description of these features can be found in the FEATURES distribution file.

The system can run code written for STOIC, provided that it includes no CODE< definitions, and does a minimum amount of pointer arithmetic. Practically, this isn't a problem due to the fact that virtually no software has ever been written for STOIC, and conceptually it is part of STOICAL's progressive outlook on the future.

STOICAL has a fascinating history, I suggest you read all of the included documentation.
