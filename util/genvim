#! ../stoical

% Program to generate vim syntax keywords from STOICAL documentation.

args[ @ 2 lt
if{
	"usage: genvim dir\n(where 'dir' contains" ^
	" documentation. output is to stdout.\n" + = bye
}

0 'fil		variable
0 'dir		variable
0 'dirname	variable
args[ 1 ]@ dup '/ + dirname ! opendir
if{ dir ! }else{ "error opening directory.\n" = bye }

2 ( dir @ readdir drop drop )
% Output the initial parts
%% " Vim syntax file
%% " Language   : STOICAL
%% " Maintainer : Jonathan M. Liles <wantingwaiting@users.sf.net>
%% " Last change: 04/22/2002
%% "
%% " Notes: This file was generated by genvim. Do not edit. 
%% 
%% if version < 600
%% 	syntax clear
%% elseif exists("b:current_syntax")
%% 	finish
%% endif
%% 
%% syn case ignore
%% 
%% if version >= 600
%% 	setlocal iskeyword=!,@,35-64,A-Z,91-96,a-z,123-126,128-255
%% else
%% 	set iskeyword=!,@,35-64,A-Z,91-96,a-z,123-126,128-255
%% endif
%%
%% syn keyword stoical_todo contained FIXME TODO
%% syn match stoical_todo contained 'Copyright\(\s([Cc])\)\=\(\s[0-9]\{2,4}\)\='
%%
%% " Word set.

[ '% 0 'x 0 '; 0 ': 0 '%% 0 '): 0 '() 0 '([) 0 '(]) 0 ':{ 0 ] 'ignore( hash

{ dir @ readdir }while{

	% file name is also the catagory name
	dup dirname @ swap + 'r open
	if{ fil ! }else{ "error opening file" = bye }

	"syn keyword stoical_" = = " " =

	% search for word names in the file 
	{ fil @ readln }while{
		dup |^----\{ | 
		if{ drop drop }else{
			x m |^([^ \t]+)$|
			if{
				% ignore words that we use regex's for
				dup ignore( swap )@ mark? not
				if{ drop drop }else{ drop = space }
			}
		}
	} fil @ close

	'\n =
} dir @ closedir

%% " Define some things better represented with regular expressions..

%% " syn clear stoical_stack
%% syn match stoical_dictionary '\<()[ \t]\+[^ \t]\+\>' oneline
%% syn keyword stoical_Types S F R P IO A H C * BAH FLOAT REFERENCE contained
%% syn keyword stoical_Types STRING POINTER STREAM ARRAY HASH CLAUSE contained
%% syn region stoical_TypeDef start=+:(+ end=+):{+ end=+):+ contains=stoical_Types
%%
%% syn region stoical_ColonDef start=+:[ \t]+ end=+\<;\>+ contains=ALL fold transparent
%% syn region stoical_ColonDef start=+:$+ end=+\<;\>+ contains=ALL fold transparent

%% syn region stoical_string start=+\"+ end=+[^\\]"+ end=+$+ oneline
%% syn region stoical_string start=+'+ end=+\s+ end=+$+ oneline
%%
%% syn match stoical_string '\<ascii[ \t].\>' oneline
%% syn match stoical_regex '\<x[ \t][bsigmn]\+\>' oneline
%% syn region stoical_regex start=+\.*|+ end=+[^\\]|+ end=+$+ oneline
%%
%% syn match stoical_integer '\<-\=[0-9.]*[0-9.]\+\>' oneline
%% syn match stoical_hex '\<[0-9a-fA-F]*[0-9][0-9a-fA-F]*\>' oneline
%% syn match stoical_float '\<-\=[0-9]*[.]\=[0-9]\+[Ee][0-9]\+\>' oneline
%% 
%%
%% " Comments
%% syn match stoical_comment '\s%\s.*$' contains=stoical_todo oneline
%% syn match stoical_comment '^%\s.*$' contains=stoical_todo oneline
%% syn match stoical_comment '^#!\s.*$' oneline
%%
%% syn match stoical_string /%%.*$/hs=s+3 contains=stoical_compiler oneline

%% " Include files
%% syn match stoical_include '^['"].* \(load\|include\)' oneline

%% hi link stoical_todo Todo
%% hi link stoical_unary Operator
%% hi link stoical_binary Operator
%% hi link stoical_math Number
%% hi link stoical_integer Number
%% hi link stoical_float Float
%% hi link stoical_stack Special
%% hi link stoical_io Special
%% hi link stoical_regex String
%% hi link stoical_include Include
%% hi link stoical_iterative Repeat
%% hi link stoical_conditional Conditional
%% hi link stoical_compiler Statement
%% hi link stoical_comment Comment
%% hi link stoical_constants Conditional
%% hi link stoical_variables Statement
%% hi link stoical_var Function
%% hi link stoical_array Function
%% hi link stoical_dictionary Define
%% hi link stoical_string String

%% hi link stoical_ColonDef Define
%% hi link stoical_TypeDef Define
%% hi link stoical_Types Typedef

%% hi clear Folded
%% hi link Folded Define

%% syn sync fromstart
%% syn sync maxlines=100
%%
%% let b:current_syntax = "stoical"
%% set foldmethod=syntax
%% set foldminlines=4
%% set fillchars=fold::


